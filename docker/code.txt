
>>> ./postgres/init/02-create_database.sh
#!/bin/bash

set -euo pipefail

APP_DATABASE=${APP_DATABASE:-playground}
POSTGRES_APP_USER=${POSTGRES_APP_USER:-genai}
POSTGRES_APP_PASSWORD=${POSTGRES_APP_PASSWORD:-genai}

SCRIPT_DIR="$(dirname "$0")"
SUBSCRIPTS_DIR="${SCRIPT_DIR}/subscripts"

echo "Checking for database '$APP_DATABASE'..."

db_exists=$(psql -U "$POSTGRES_USER" -d "postgres" -t -c "SELECT 1 FROM pg_database WHERE datname = '$APP_DATABASE';")
db_exists=$(echo "$db_exists" | tr -d ' ')

# Check if the variable has content
if [ -n "$db_exists" ]; then
  echo "Database '$APP_DATABASE' already exists."
else
  echo "Creating database '$APP_DATABASE'..."
  psql -U "$POSTGRES_USER" -d "postgres" -c "CREATE DATABASE \"$APP_DATABASE\";"

  # Check if user already exists before creating
  user_exists=$(psql -U "$POSTGRES_USER" -d "postgres" -t -c "SELECT 1 FROM pg_roles WHERE rolname = '$POSTGRES_APP_USER';")
  user_exists=$(echo "$user_exists" | tr -d ' ')

  if [ -n "$user_exists" ]; then
    echo "User '$POSTGRES_APP_USER' already exists."
  else
    echo "Creating user '$POSTGRES_APP_USER'..."
    psql -U "$POSTGRES_USER" -d "postgres" -c "CREATE USER \"$POSTGRES_APP_USER\" WITH PASSWORD '$POSTGRES_APP_PASSWORD';"
  fi

  echo "Creating schema..."
  psql -U "$POSTGRES_USER" -d "$APP_DATABASE" -f "${SUBSCRIPTS_DIR}/schema.sql"

  echo "Granting privileges to '$POSTGRES_APP_USER'..."
  psql -U "$POSTGRES_USER" -d "postgres" -c "GRANT ALL PRIVILEGES ON DATABASE \"$APP_DATABASE\" TO \"$POSTGRES_APP_USER\";"

  psql -U "$POSTGRES_USER" -d "$APP_DATABASE" -c "
    GRANT ALL PRIVILEGES ON SCHEMA public TO \"$POSTGRES_APP_USER\";
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON TABLES TO \"$POSTGRES_APP_USER\";
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON SEQUENCES TO \"$POSTGRES_APP_USER\";
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON FUNCTIONS TO \"$POSTGRES_APP_USER\";
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO \"$POSTGRES_APP_USER\";
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO \"$POSTGRES_APP_USER\";
    GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO \"$POSTGRES_APP_USER\";
  "
  echo "Database initialization complete!"
fi

-----------

>>> ./postgres/init/03-load_data.sh
#!/bin/bash

set -euo pipefail

APP_DATABASE=${APP_DATABASE:-playground}

SCRIPT_DIR="$(dirname "$0")"
SUBSCRIPTS_DIR="${SCRIPT_DIR}/subscripts"

echo "Loading initial data."

load_data_script() {
    local script_name="$1"
    echo "Loading $script_name..."
    psql -U "$POSTGRES_USER" -d "$APP_DATABASE" -f "${SUBSCRIPTS_DIR}/${script_name}.sql"
    echo "$script_name loaded."
}

load_data_script model
load_data_script model_parameter
load_data_script model_configuration
load_data_script items_test_data

echo "Done!"

-----------

>>> ./docker-compose.yml
version: '3.8'

services:
  postgres:
    image: postgres:16
    container_name: genai-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_ADMIN_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME:-postgres} -d playground"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - genai-network

volumes:
  postgres-data:
    name: genai-postgres-data

networks:
  genai-network:
    name: genai-network
    driver: bridge

-----------

>>> ./postgres/init/archive/book_rank_source.sql
INSERT INTO book_rank_source (org_name, publish_date) VALUES ('New York Times','2024-07-08') RETURNING id;

-----------

>>> ./postgres/init/archive/model_configuration.sql
-- SQL script with properly escaped apostrophes

-- First, ensure we have the models
INSERT INTO model (model_name, model_provider, model_api_url, comment) 
SELECT 'gpt-3.5-turbo', 'OpenAI', 'https://api.openai.com/v1', 'GPT-3.5 Turbo model'
WHERE NOT EXISTS (SELECT 1 FROM model WHERE model_name = 'gpt-3.5-turbo');

INSERT INTO model (model_name, model_provider, model_api_url, comment) 
SELECT 'gpt-4', 'OpenAI', 'https://api.openai.com/v1', 'GPT-4 model'
WHERE NOT EXISTS (SELECT 1 FROM model WHERE model_name = 'gpt-4');

-- Get model IDs for insertion
DO $$
DECLARE
    gpt35_id bigint;
    gpt4_id bigint;
BEGIN
    SELECT id INTO gpt35_id FROM model WHERE model_name = 'gpt-3.5-turbo';
    SELECT id INTO gpt4_id FROM model WHERE model_name = 'gpt-4';
    
    -- Common parameters for GPT-3.5 Turbo
    -- Temperature
    INSERT INTO model_parameter (model_id, param_name, description, data_type, min_value, max_value, default_value, display_order)
    SELECT gpt35_id, 'temperature', 
           'Controls randomness in token selection. Lower values make output more deterministic and focused (0 is deterministic), higher values make output more random and creative.', 
           'number', '0.0', '2.0', '0.7', 1
    WHERE NOT EXISTS (SELECT 1 FROM model_parameter WHERE model_id = gpt35_id AND param_name = 'temperature');

    -- Top_p
    INSERT INTO model_parameter (model_id, param_name, description, data_type, min_value, max_value, default_value, display_order)
    SELECT gpt35_id, 'top_p', 
           'Controls diversity via nucleus sampling. The model considers tokens with top_p probability mass. 0.1 means only the tokens comprising the top 10% probability are considered.', 
           'number', '0.0', '1.0', '1.0', 2
    WHERE NOT EXISTS (SELECT 1 FROM model_parameter WHERE model_id = gpt35_id AND param_name = 'top_p');

    -- Max_tokens
    INSERT INTO model_parameter (model_id, param_name, description, data_type, min_value, max_value, default_value, display_order)
    SELECT gpt35_id, 'max_tokens', 
           'Maximum number of tokens to generate. The total length of input tokens and output tokens is limited by the model context length.', 
           'integer', '1', '4096', '1024', 3
    WHERE NOT EXISTS (SELECT 1 FROM model_parameter WHERE model_id = gpt35_id AND param_name = 'max_tokens');

    -- Frequency_penalty
    INSERT INTO model_parameter (model_id, param_name, description, data_type, min_value, max_value, default_value, display_order)
    SELECT gpt35_id, 'frequency_penalty', 
           'Reduces repetition by penalizing tokens based on how frequently they''ve appeared in the text so far. Higher values decrease repetition.', 
           'number', '-2.0', '2.0', '0.0', 4
    WHERE NOT EXISTS (SELECT 1 FROM model_parameter WHERE model_id = gpt35_id AND param_name = 'frequency_penalty');

    -- Presence_penalty
    INSERT INTO model_parameter (model_id, param_name, description, data_type, min_value, max_value, default_value, display_order)
    SELECT gpt35_id, 'presence_penalty', 
           'Reduces repetition by penalizing tokens that have appeared at all in the text so far. Higher values increase the model''s likelihood to talk about new topics.', 
           'number', '-2.0', '2.0', '0.0', 5
    WHERE NOT EXISTS (SELECT 1 FROM model_parameter WHERE model_id = gpt35_id AND param_name = 'presence_penalty');

    -- Common parameters for GPT-4
    -- Temperature
    INSERT INTO model_parameter (model_id, param_name, description, data_type, min_value, max_value, default_value, display_order)
    SELECT gpt4_id, 'temperature', 
           'Controls randomness in token selection. Lower values make output more deterministic and focused (0 is deterministic), higher values make output more random and creative.', 
           'number', '0.0', '2.0', '0.7', 1
    WHERE NOT EXISTS (SELECT 1 FROM model_parameter WHERE model_id = gpt4_id AND param_name = 'temperature');

    -- Top_p
    INSERT INTO model_parameter (model_id, param_name, description, data_type, min_value, max_value, default_value, display_order)
    SELECT gpt4_id, 'top_p', 
           'Controls diversity via nucleus sampling. The model considers tokens with top_p probability mass. 0.1 means only the tokens comprising the top 10% probability are considered.', 
           'number', '0.0', '1.0', '1.0', 2
    WHERE NOT EXISTS (SELECT 1 FROM model_parameter WHERE model_id = gpt4_id AND param_name = 'top_p');

    -- Max_tokens
    INSERT INTO model_parameter (model_id, param_name, description, data_type, min_value, max_value, default_value, display_order)
    SELECT gpt4_id, 'max_tokens', 
           'Maximum number of tokens to generate. The total length of input tokens and output tokens is limited by the model context length.', 
           'integer', '1', '8192', '1500', 3
    WHERE NOT EXISTS (SELECT 1 FROM model_parameter WHERE model_id = gpt4_id AND param_name = 'max_tokens');

    -- Frequency_penalty
    INSERT INTO model_parameter (model_id, param_name, description, data_type, min_value, max_value, default_value, display_order)
    SELECT gpt4_id, 'frequency_penalty', 
           'Reduces repetition by penalizing tokens based on how frequently they''ve appeared in the text so far. Higher values decrease repetition.', 
           'number', '-2.0', '2.0', '0.0', 4
    WHERE NOT EXISTS (SELECT 1 FROM model_parameter WHERE model_id = gpt4_id AND param_name = 'frequency_penalty');

    -- Presence_penalty
    INSERT INTO model_parameter (model_id, param_name, description, data_type, min_value, max_value, default_value, display_order)
    SELECT gpt4_id, 'presence_penalty', 
           'Reduces repetition by penalizing tokens that have appeared at all in the text so far. Higher values increase the model''s likelihood to talk about new topics.', 
           'number', '-2.0', '2.0', '0.0', 5
    WHERE NOT EXISTS (SELECT 1 FROM model_parameter WHERE model_id = gpt4_id AND param_name = 'presence_penalty');
END $$;
-----------

>>> ./postgres/init/archive/test_data.sql
insert into model (model_name, model_provider, model_api_url, comment) values ('Test model', 'Model Test Inc', 'https://example.com/api','This is here to test things.') returning id;
INSERT INTO model_configuration (model_id, model_config, comment, created_at)
VALUES (
  1,
  '{"temperature": 0.7, "max_tokens": 150, "top_p": 0.9}',
  'Sample config for testing',
  now()
);
insert into entity_summary (model_configuration_id, entity, entity_id, summary, created_at)
values (
1, 'ranked_books',3,'This book was less than wonderful.',now()
);
insert into entity_summary (model_configuration_id, entity, entity_id, summary, created_at)
values (
1, 'ranked_books',3,'I thought it was okay.',now()
);

-----------

>>> ./postgres/init/archive/top100of21st.sql
INSERT INTO book_rank_source (org_name, publish_date) VALUES ('New York Times','2024-07-08') RETURNING id;

INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,1,'My Brilliant Friend','Elena Ferrante',2012);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,2,'The Warmth of Other Suns','Isabel Wilkerson',2010);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,3,'Wolf Hall','Hilary Mantel',2009);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,4,'The Known World','Edward P. Jones',2003);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,5,'The Corrections','Jonathan Franzen',2001);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,6,'2666','Roberto Bolaño',2008);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,7,'The Underground Railroad','Colson Whitehead',2016);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,8,'Austerlitz','W.G. Sebald',2001);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,9,'Never Let Me Go','Kazuo Ishiguro',2005);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,10,'Gilead','Marilynne Robinson',2004);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,11,'The Brief Wondrous Life of Oscar Wao','Junot Díaz',2007);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,12,'The publish_year of Magical Thinking','Joan Didion',2005);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,13,'The Road','Cormac McCarthy',2006);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,14,'Outline','Rachel Cusk',2015);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,15,'Pachinko','Min Jin Lee',2017);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,16,'The Amazing Adventures of Kavalier & Clay','Michael Chabon',2000);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,17,'The Sellout','Paul Beatty',2015);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,18,'Lincoln in the Bardo','George Saunders',2017);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,19,'Say Nothing','Patrick Radden Keefe',2019);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,20,'Erasure','Percival Everett',2001);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,21,'Evicted','Matthew Desmond',2016);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,22,'Behind the Beautiful Forevers','Katherine Boo',2012);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,23,'Hateship, Friendship, Courtship, Loveship, Marriage','Alice Munro',2001);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,24,'The Overstory','Richard Powers',2018);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,25,'Random Family','Adrian Nicole LeBlanc',2003);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,26,'Atonement','Ian McEwan',2002);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,27,'Americanah','Chimamanda Ngozi Adichie',2013);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,28,'Cloud Atlas','David Mitchell',2004);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,29,'The Last Samurai','Helen DeWitt',2000);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,30,'Sing, Unburied, Sing','Jesmyn Ward',2017);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,31,'White Teeth','Zadie Smith',2000);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,32,'The Line of Beauty','Alan Hollinghurst',2004);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,33,'Salvage the Bones','Jesmyn Ward',2011);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,34,'Citizen','Claudia Rankine',2014);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,35,'Fun Home','Alison Bechdel',2006);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,36,'Between the World and Me','Ta-Nehisi Coates',2015);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,37,'The publish_years','Annie Ernaux',2018);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,38,'The Savage Detectives','Roberto Bolaño',2007);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,39,'A Visit From the Goon Squad','Jennifer Egan',2010);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,40,'H Is for Hawk','Helen Macdonald',2015);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,41,'Small Things Like These','Claire Keegan',2021);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,42,'A Brief History of Seven Killings','Marlon James',2014);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,43,'Postwar','Tony Judt',2005);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,44,'The Fifth Season','N. K. Jemisin',2015);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,45,'The Argonauts','Maggie Nelson',2015);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,46,'The Goldfinch','Donna Tartt',2013);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,47,'A Mercy','Toni Morrison',2008);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,48,'Persepolis','Marjane Satrapi',2003);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,49,'The Vegetarian','Han Kang',2016);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,50,'Trust','Hernan Diaz',2022);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,51,'Life After Life','Kate Atkinson',2013);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,52,'Train Dreams','Denis Johnson',2011);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,53,'Runaway','Alice Munro',2004);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,54,'Tenth of December','George Saunders',2013);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,55,'The Looming Tower','Lawrence Wright',2006);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,56,'The Flamethrowers','Rachel Kushner',2013);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,57,'Nickel and Dimed','Barbara Ehrenreich',2001);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,58,'Stay True','Hua Hsu',2022);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,59,'Middlesex','Jeffrey Eugenides',2002);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,60,'Heavy','Kiese Laymon',2018);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,61,'Demon Copperhead','Barbara Kingsolver',2022);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,62,'10:04','Ben Lerner',2014);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,63,'Veronica','Mary Gaitskill',2005);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,64,'The Great Believers','Rebecca Makkai',2018);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,65,'The Plot Against America','Philip Roth',2004);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,66,'We the Animals','Justin Torres',2011);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,67,'Far From the Tree','Andrew Solomon',2012);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,68,'The Friend','Sigrid Nunez',2018);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,69,'The New Jim Crow','Michelle Alexander',2010);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,70,'All Aunt Hagar''s Children','Edward P. Jones',2006);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,71,'The Copenhagen Trilogy','Tove Ditlevsen',2021);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,72,'Secondhand Time','Svetlana Alexievich',2016);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,73,'The Passage of Power','Robert Caro',2012);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,74,'Olive Kitteridge','Elizabeth Strout',2008);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,75,'Exit West','Mohsin Hamid',2017);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,76,'Tomorrow, and Tomorrow, and Tomorrow','Gabrielle Zevin',2022);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,77,'An American Marriage','Tayari Jones',2018);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,78,'Septology','Jon Fosse',2022);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,79,'A Manual for Cleaning Women','Lucia Berlin',2015);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,80,'The Story of the Lost Child','Elena Ferrante',2015);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,81,'Pulphead','John Jeremiah Sullivan',2011);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,82,'Hurricane Season','Fernanda Melchor',2020);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,83,'When We Cease to Understand the World','Benjamín Labatut',2021);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,84,'The Emperor of All Maladies','Siddhartha Mukherjee',2010);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,85,'Pastoralia','George Saunders',2000);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,86,'Frederick Douglass','David W. Blight',2018);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,87,'Detransition, Baby','Torrey Peters',2021);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,88,'The Collected Stories of Lydia Davis','Lydia Davis',2010);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,89,'The Return','Hisham Matar',2016);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,90,'The Sympathizer','Viet Thanh Nguyen',2015);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,91,'The Human Stain','Philip Roth',2000);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,92,'The Days of Abandonment','Elena Ferrante',2005);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,93,'Station Eleven','Emily St. John Mandel',2014);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,94,'On Beauty','Zadie Smith',2005);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,95,'Bring Up the Bodies','Hilary Mantel',2012);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,96,'Wayward Lives, Beautiful Experiments','Saidiya Hartman',2019);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,97,'Men We Reaped','Jesmyn Ward',2013);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,98,'Bel Canto','Ann Patchett',2001);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,99,'How to Be Both','Ali Smith',2014);
INSERT INTO ranked_books (list_id, rank, title, author_name, publish_year) VALUES (1,100,'Tree of Smoke','Denis Johnson',2007);

-----------

>>> ./postgres/init/subscripts/items_test_data.sql
-- docker/postgres/init/subscripts/items_test_data.sql
-- Unified test data for the items table

-- Insert books as items
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM items WHERE item_type = 'book' AND name = 'To Kill a Mockingbird') THEN
        INSERT INTO items (item_type, name, creator, created_year, attributes, created_at, updated_at)
        VALUES ('book', 'To Kill a Mockingbird', 'Harper Lee', '1960',
                '{"genre": "Fiction", "tags": ["classic", "southern"], "rank": 1, "pages": 281, "isbn": "978-0-06-112008-4"}',
                NOW(), NOW());
END IF;

    IF NOT EXISTS (SELECT 1 FROM items WHERE item_type = 'book' AND name = '1984') THEN
        INSERT INTO items (item_type, name, creator, created_year, attributes, created_at, updated_at)
        VALUES ('book', '1984', 'George Orwell', '1949',
                '{"genre": "Dystopian", "tags": ["political", "classic"], "rank": 2, "pages": 328, "isbn": "978-0-452-28423-4"}',
                NOW(), NOW());
END IF;

    IF NOT EXISTS (SELECT 1 FROM items WHERE item_type = 'book' AND name = 'The Great Gatsby') THEN
        INSERT INTO items (item_type, name, creator, created_year, attributes, created_at, updated_at)
        VALUES ('book', 'The Great Gatsby', 'F. Scott Fitzgerald', '1925',
                '{"genre": "Fiction", "tags": ["classic", "american"], "rank": 3, "pages": 180, "isbn": "978-0-7432-7356-5"}',
                NOW(), NOW());
END IF;

    IF NOT EXISTS (SELECT 1 FROM items WHERE item_type = 'book' AND name = 'Pride and Prejudice') THEN
        INSERT INTO items (item_type, name, creator, created_year, attributes, created_at, updated_at)
        VALUES ('book', 'Pride and Prejudice', 'Jane Austen', '1813',
                '{"genre": "Romance", "tags": ["classic", "regency"], "rank": 4, "pages": 432, "isbn": "978-0-14-143951-8"}',
                NOW(), NOW());
END IF;

    -- Add some ranked books from NY Times list
    IF NOT EXISTS (SELECT 1 FROM items WHERE item_type = 'ranked_book' AND name = 'My Brilliant Friend') THEN
        INSERT INTO items (item_type, name, creator, created_year, source, attributes, created_at, updated_at)
        VALUES ('ranked_book', 'My Brilliant Friend', 'Elena Ferrante', '2012', 'New York Times',
                '{"rank": 1, "list_date": "2024-07-08", "genre": "Fiction", "list_name": "Best of 21st Century"}',
                NOW(), NOW());
END IF;

    IF NOT EXISTS (SELECT 1 FROM items WHERE item_type = 'ranked_book' AND name = 'The Warmth of Other Suns') THEN
        INSERT INTO items (item_type, name, creator, created_year, source, attributes, created_at, updated_at)
        VALUES ('ranked_book', 'The Warmth of Other Suns', 'Isabel Wilkerson', '2010', 'New York Times',
                '{"rank": 2, "list_date": "2024-07-08", "genre": "Non-fiction", "list_name": "Best of 21st Century"}',
                NOW(), NOW());
END IF;

    IF NOT EXISTS (SELECT 1 FROM items WHERE item_type = 'ranked_book' AND name = 'Wolf Hall') THEN
        INSERT INTO items (item_type, name, creator, created_year, source, attributes, created_at, updated_at)
        VALUES ('ranked_book', 'Wolf Hall', 'Hilary Mantel', '2009', 'New York Times',
                '{"rank": 3, "list_date": "2024-07-08", "genre": "Historical Fiction", "list_name": "Best of 21st Century"}',
                NOW(), NOW());
END IF;
END
$$;

-- Insert people as items
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM items WHERE item_type = 'person' AND name = 'Harper Lee') THEN
        INSERT INTO items (item_type, name, attributes, created_at, updated_at)
        VALUES ('person', 'Harper Lee',
                '{"email": "harper.lee@example.com", "birth_date": "1926-04-28", "occupation": "Author", "nationality": "American", "awards": ["Pulitzer Prize"], "biography": "Nelle Harper Lee was an American novelist..."}',
                NOW(), NOW());
END IF;

    IF NOT EXISTS (SELECT 1 FROM items WHERE item_type = 'person' AND name = 'George Orwell') THEN
        INSERT INTO items (item_type, name, attributes, created_at, updated_at)
        VALUES ('person', 'George Orwell',
                '{"email": "george.orwell@example.com", "birth_date": "1903-06-25", "occupation": "Author", "nationality": "British", "real_name": "Eric Arthur Blair", "biography": "English novelist and essayist..."}',
                NOW(), NOW());
END IF;

    IF NOT EXISTS (SELECT 1 FROM items WHERE item_type = 'person' AND name = 'F. Scott Fitzgerald') THEN
        INSERT INTO items (item_type, name, attributes, created_at, updated_at)
        VALUES ('person', 'F. Scott Fitzgerald',
                '{"email": "scott.fitzgerald@example.com", "birth_date": "1896-09-24", "occupation": "Author", "nationality": "American", "biography": "American novelist, essayist, and short story writer..."}',
                NOW(), NOW());
END IF;

    IF NOT EXISTS (SELECT 1 FROM items WHERE item_type = 'person' AND name = 'Jane Austen') THEN
        INSERT INTO items (item_type, name, attributes, created_at, updated_at)
        VALUES ('person', 'Jane Austen',
                '{"email": "jane.austen@example.com", "birth_date": "1775-12-16", "occupation": "Author", "nationality": "British", "biography": "English novelist known primarily for her six major novels..."}',
                NOW(), NOW());
END IF;

    IF NOT EXISTS (SELECT 1 FROM items WHERE item_type = 'person' AND name = 'John Smith') THEN
        INSERT INTO items (item_type, name, attributes, created_at, updated_at)
        VALUES ('person', 'John Smith',
                '{"email": "john.smith@example.com", "birth_date": "1980-05-15", "occupation": "Literary Critic", "education": "PhD in Literature", "specialization": "20th Century Fiction"}',
                NOW(), NOW());
END IF;
END
$$;

-- Create summaries for the items
DO $$
DECLARE
book_id_mockingbird BIGINT;
    book_id_1984 BIGINT;
BEGIN
    -- Get IDs of existing books
SELECT id INTO book_id_mockingbird FROM items WHERE item_type = 'book' AND name = 'To Kill a Mockingbird';
SELECT id INTO book_id_1984 FROM items WHERE item_type = 'book' AND name = '1984';

IF book_id_mockingbird IS NOT NULL AND NOT EXISTS (SELECT 1 FROM summaries WHERE item_id = book_id_mockingbird) THEN
        INSERT INTO summaries (name, item_id, content, source, attributes, created_at, updated_at)
        VALUES ('Classic Summary of To Kill a Mockingbird', book_id_mockingbird,
                'Set in the 1930s Alabama, this novel follows Scout Finch and her father Atticus, a lawyer defending a Black man accused of raping a white woman. The story explores themes of racial injustice, moral growth, and the loss of innocence.',
                'ClassicLiteratureGuide',
                '{"quality_score": 4.8, "word_count": 42}',
                NOW(), NOW());
END IF;

    IF book_id_mockingbird IS NOT NULL AND NOT EXISTS (SELECT 1 FROM summaries WHERE item_id = book_id_mockingbird AND source = 'AI-Generated') THEN
        INSERT INTO summaries (name, item_id, content, source, attributes, created_at, updated_at)
        VALUES ('AI Summary of To Kill a Mockingbird', book_id_mockingbird,
                'Harper Lee''s powerful novel explores racial prejudice and moral complexity through the eyes of a young girl in Depression-era Alabama. The narrative centers around her father''s legal defense of a Black man falsely accused of a crime, revealing deep social divides and the importance of empathy and moral courage.',
                'AI-Generated',
                '{"quality_score": 4.2, "word_count": 51, "model": "GPT-4"}',
                NOW(), NOW());
END IF;

    IF book_id_1984 IS NOT NULL AND NOT EXISTS (SELECT 1 FROM summaries WHERE item_id = book_id_1984) THEN
        INSERT INTO summaries (name, item_id, content, source, attributes, created_at, updated_at)
        VALUES ('Summary of 1984', book_id_1984,
                'Orwell''s dystopian masterpiece depicts a totalitarian future where Big Brother watches everyone and the Thought Police suppress individualism. The protagonist Winston Smith rebels against the Party by falling in love and keeping a diary, only to face the horrific consequences of challenging the system.',
                'LiteraryArchive',
                '{"quality_score": 4.9, "word_count": 47}',
                NOW(), NOW());
END IF;
END
$$;

-- Create relationships between items
DO $$
DECLARE
book_id_mockingbird BIGINT;
    book_id_1984 BIGINT;
    book_id_gatsby BIGINT;
    book_id_pride BIGINT;
    person_id_lee BIGINT;
    person_id_orwell BIGINT;
    person_id_fitzgerald BIGINT;
    person_id_austen BIGINT;
    person_id_smith BIGINT;
    collection_id BIGINT;
BEGIN
    -- Get IDs of existing entities
SELECT id INTO book_id_mockingbird FROM items WHERE item_type = 'book' AND name = 'To Kill a Mockingbird';
SELECT id INTO book_id_1984 FROM items WHERE item_type = 'book' AND name = '1984';
SELECT id INTO book_id_gatsby FROM items WHERE item_type = 'book' AND name = 'The Great Gatsby';
SELECT id INTO book_id_pride FROM items WHERE item_type = 'book' AND name = 'Pride and Prejudice';

SELECT id INTO person_id_lee FROM items WHERE item_type = 'person' AND name = 'Harper Lee';
SELECT id INTO person_id_orwell FROM items WHERE item_type = 'person' AND name = 'George Orwell';
SELECT id INTO person_id_fitzgerald FROM items WHERE item_type = 'person' AND name = 'F. Scott Fitzgerald';
SELECT id INTO person_id_austen FROM items WHERE item_type = 'person' AND name = 'Jane Austen';
SELECT id INTO person_id_smith FROM items WHERE item_type = 'person' AND name = 'John Smith';

-- Create a collection as an item
IF NOT EXISTS (SELECT 1 FROM items WHERE item_type = 'collection' AND name = 'Classic Fiction Collection') THEN
        INSERT INTO items (item_type, name, description, attributes, created_at, updated_at)
        VALUES ('collection', 'Classic Fiction Collection', 'Notable classic fiction works',
                '{"curator": "Literary Canon Committee", "created_date": "2023-01-15"}',
                NOW(), NOW());
END IF;

SELECT id INTO collection_id FROM items WHERE item_type = 'collection' AND name = 'Classic Fiction Collection';

-- Author relationships
IF person_id_lee IS NOT NULL AND book_id_mockingbird IS NOT NULL AND
       NOT EXISTS (SELECT 1 FROM relationships WHERE relationship_type = 'authored' AND source_item_id = person_id_lee AND target_item_id = book_id_mockingbird) THEN
        INSERT INTO relationships (name, relationship_type, source_item_id, target_item_id, attributes, created_at, updated_at)
        VALUES ('Harper Lee authored To Kill a Mockingbird', 'authored', person_id_lee, book_id_mockingbird,
                '{"year": 1960, "publisher": "J. B. Lippincott & Co."}',
                NOW(), NOW());
END IF;

    IF person_id_orwell IS NOT NULL AND book_id_1984 IS NOT NULL AND
       NOT EXISTS (SELECT 1 FROM relationships WHERE relationship_type = 'authored' AND source_item_id = person_id_orwell AND target_item_id = book_id_1984) THEN
        INSERT INTO relationships (name, relationship_type, source_item_id, target_item_id, attributes, created_at, updated_at)
        VALUES ('George Orwell authored 1984', 'authored', person_id_orwell, book_id_1984,
                '{"year": 1949, "publisher": "Secker & Warburg"}',
                NOW(), NOW());
END IF;

    -- Collection relationships
    IF collection_id IS NOT NULL THEN
        -- Create collection definition relationship
        IF NOT EXISTS (SELECT 1 FROM relationships WHERE relationship_type = 'collection_definition' AND target_item_id = collection_id) THEN
            INSERT INTO relationships (name, relationship_type, source_item_id, target_item_id, attributes, created_at, updated_at)
            VALUES ('Classic Fiction Collection Definition', 'collection_definition', collection_id, collection_id,
                    '{"description": "Notable classic fiction works", "curator": "Literary Canon Committee"}',
                    NOW(), NOW());
END IF;

        -- Add books to collection
        IF book_id_1984 IS NOT NULL AND NOT EXISTS (SELECT 1 FROM relationships WHERE relationship_type = 'collection' AND source_item_id = book_id_1984 AND target_item_id = collection_id) THEN
            INSERT INTO relationships (name, relationship_type, source_item_id, target_item_id, attributes, created_at, updated_at)
            VALUES ('1984 in Classic Fiction Collection', 'collection', book_id_1984, collection_id,
                    '{"added_date": "2023-01-15", "position": 1}',
                    NOW(), NOW());
END IF;

        IF book_id_gatsby IS NOT NULL AND NOT EXISTS (SELECT 1 FROM relationships WHERE relationship_type = 'collection' AND source_item_id = book_id_gatsby AND target_item_id = collection_id) THEN
            INSERT INTO relationships (name, relationship_type, source_item_id, target_item_id, attributes, created_at, updated_at)
            VALUES ('The Great Gatsby in Classic Fiction Collection', 'collection', book_id_gatsby, collection_id,
                    '{"added_date": "2023-01-15", "position": 2}',
                    NOW(), NOW());
END IF;

        IF book_id_mockingbird IS NOT NULL AND NOT EXISTS (SELECT 1 FROM relationships WHERE relationship_type = 'collection' AND source_item_id = book_id_mockingbird AND target_item_id = collection_id) THEN
            INSERT INTO relationships (name, relationship_type, source_item_id, target_item_id, attributes, created_at, updated_at)
            VALUES ('To Kill a Mockingbird in Classic Fiction Collection', 'collection', book_id_mockingbird, collection_id,
                    '{"added_date": "2023-01-15", "position": 3}',
                    NOW(), NOW());
END IF;
END IF;

    -- Thematic similarity relationship
    IF book_id_1984 IS NOT NULL AND book_id_mockingbird IS NOT NULL AND
       NOT EXISTS (SELECT 1 FROM relationships WHERE relationship_type = 'similar_themes' AND source_item_id = book_id_1984 AND target_item_id = book_id_mockingbird) THEN
        INSERT INTO relationships (name, relationship_type, source_item_id, target_item_id, attributes, created_at, updated_at)
        VALUES ('1984 and To Kill a Mockingbird share themes', 'similar_themes', book_id_1984, book_id_mockingbird,
                '{"themes": ["social justice", "moral courage"], "similarity_score": 0.72}',
                NOW(), NOW());
END IF;

    -- Critic review relationship
    IF person_id_smith IS NOT NULL AND book_id_mockingbird IS NOT NULL AND
       NOT EXISTS (SELECT 1 FROM relationships WHERE relationship_type = 'reviewed' AND source_item_id = person_id_smith AND target_item_id = book_id_mockingbird) THEN
        INSERT INTO relationships (name, relationship_type, source_item_id, target_item_id, attributes, created_at, updated_at)
        VALUES ('John Smith reviewed To Kill a Mockingbird', 'reviewed', person_id_smith, book_id_mockingbird,
                '{"date": "2022-05-10", "rating": 5, "publication": "Literary Review Quarterly"}',
                NOW(), NOW());
END IF;
END
$$;

-----------

>>> ./postgres/init/subscripts/model.sql
INSERT INTO model (model_name, model_provider, model_api_url, comment)
VALUES
    ('GPT-3.5-Turbo', 'OpenAI', 'https://api.openai.com/v1/chat/completions', 'General purpose model, good balance of capabilities and cost'),
    ('GPT-4o', 'OpenAI', 'https://api.openai.com/v1/chat/completions', 'Advanced model with strong reasoning and instruction-following'),
    ('Claude 3 Opus', 'Anthropic', 'https://api.anthropic.com/v1/messages', 'Anthropic''s most capable model for complex tasks'),
    ('Claude 3 Sonnet', 'Anthropic', 'https://api.anthropic.com/v1/messages', 'Balanced performance and cost for most use cases'),
    ('Llama-3-70b', 'Meta', 'https://api.together.xyz/v1/completions', 'Open source model with strong general capabilities');

-----------

>>> ./postgres/init/subscripts/model_configuration.sql

INSERT INTO model_configuration (model_id, model_config, comment, created_at)
VALUES
    (
        (SELECT id FROM model WHERE model_name = 'GPT-3.5-Turbo'),
        '{"temperature": 0.7, "max_tokens": 1024, "top_p": 0.95}',
        'Default configuration for general usage',
        NOW()
    ),
    (
        (SELECT id FROM model WHERE model_name = 'GPT-3.5-Turbo'),
        '{"temperature": 0.2, "max_tokens": 2048, "top_p": 0.9, "frequency_penalty": 0.5}',
        'More deterministic output, good for factual responses',
        NOW()
    ),
    (
        (SELECT id FROM model WHERE model_name = 'GPT-3.5-Turbo'),
        '{"temperature": 1.2, "max_tokens": 500, "top_p": 1.0, "presence_penalty": 0.6}',
        'Creative configuration for brainstorming and idea generation',
        NOW()
    );

-- GPT-4o configurations
INSERT INTO model_configuration (model_id, model_config, comment, created_at)
VALUES
    (
        (SELECT id FROM model WHERE model_name = 'GPT-4o'),
        '{"temperature": 0.7, "max_tokens": 1500, "top_p": 0.95}',
        'Default configuration for balanced performance',
        NOW()
    ),
    (
        (SELECT id FROM model WHERE model_name = 'GPT-4o'),
        '{"temperature": 0.1, "max_tokens": 4000, "top_p": 0.8}',
        'Academic configuration optimized for detailed explanations',
        NOW()
    );

-- Claude 3 Opus configurations
INSERT INTO model_configuration (model_id, model_config, comment, created_at)
VALUES
    (
        (SELECT id FROM model WHERE model_name = 'Claude 3 Opus'),
        '{"temperature": 0.7, "max_tokens": 1024, "top_p": 0.9}',
        'Balanced configuration for general usage',
        NOW()
    ),
    (
        (SELECT id FROM model WHERE model_name = 'Claude 3 Opus'),
        '{"temperature": 0.3, "max_tokens": 2000, "top_p": 0.85, "top_k": 40}',
        'Precise configuration for technical content',
        NOW()
    );

-- Claude 3 Sonnet configurations
INSERT INTO model_configuration (model_id, model_config, comment, created_at)
VALUES
    (
        (SELECT id FROM model WHERE model_name = 'Claude 3 Sonnet'),
        '{"temperature": 0.7, "max_tokens": 1024, "top_p": 0.9}',
        'Default configuration for everyday use',
        NOW()
    );

-- Llama-3-70b configurations
INSERT INTO model_configuration (model_id, model_config, comment, created_at)
VALUES
    (
        (SELECT id FROM model WHERE model_name = 'Llama-3-70b'),
        '{"temperature": 0.8, "max_tokens": 1024, "top_p": 0.9, "repetition_penalty": 1.1}',
        'Default open source model configuration',
        NOW()
    );

-----------

>>> ./postgres/init/subscripts/model_parameter.sql
-- GPT-3.5-Turbo parameters
INSERT INTO model_parameter (model_id, param_name, description, data_type, min_value, max_value, default_value, display_order)
VALUES
    ((SELECT id FROM model WHERE model_name = 'GPT-3.5-Turbo'), 'temperature', 'Controls randomness: Lowering results in less random completions', 'float', '0', '2', '0.7', 1),
    ((SELECT id FROM model WHERE model_name = 'GPT-3.5-Turbo'), 'max_tokens', 'The maximum number of tokens in the response', 'integer', '1', '4096', '1024', 2),
    ((SELECT id FROM model WHERE model_name = 'GPT-3.5-Turbo'), 'top_p', 'Controls diversity via nucleus sampling', 'float', '0', '1', '0.95', 3),
    ((SELECT id FROM model WHERE model_name = 'GPT-3.5-Turbo'), 'presence_penalty', 'Penalizes repeated tokens', 'float', '-2', '2', '0', 4),
    ((SELECT id FROM model WHERE model_name = 'GPT-3.5-Turbo'), 'frequency_penalty', 'Penalizes frequent tokens', 'float', '-2', '2', '0', 5);

-- GPT-4o parameters
INSERT INTO model_parameter (model_id, param_name, description, data_type, min_value, max_value, default_value, display_order)
VALUES
    ((SELECT id FROM model WHERE model_name = 'GPT-4o'), 'temperature', 'Controls randomness: Lowering results in less random completions', 'float', '0', '2', '0.7', 1),
    ((SELECT id FROM model WHERE model_name = 'GPT-4o'), 'max_tokens', 'The maximum number of tokens in the response', 'integer', '1', '8192', '1024', 2),
    ((SELECT id FROM model WHERE model_name = 'GPT-4o'), 'top_p', 'Controls diversity via nucleus sampling', 'float', '0', '1', '0.95', 3),
    ((SELECT id FROM model WHERE model_name = 'GPT-4o'), 'presence_penalty', 'Penalizes repeated tokens', 'float', '-2', '2', '0', 4),
    ((SELECT id FROM model WHERE model_name = 'GPT-4o'), 'frequency_penalty', 'Penalizes frequent tokens', 'float', '-2', '2', '0', 5);

-- Claude 3 Opus parameters
INSERT INTO model_parameter (model_id, param_name, description, data_type, min_value, max_value, default_value, display_order)
VALUES
    ((SELECT id FROM model WHERE model_name = 'Claude 3 Opus'), 'temperature', 'Controls randomness in generation', 'float', '0', '1', '0.7', 1),
    ((SELECT id FROM model WHERE model_name = 'Claude 3 Opus'), 'max_tokens', 'Maximum tokens to generate', 'integer', '1', '4096', '1024', 2),
    ((SELECT id FROM model WHERE model_name = 'Claude 3 Opus'), 'top_p', 'Nucleus sampling parameter', 'float', '0', '1', '0.9', 3),
    ((SELECT id FROM model WHERE model_name = 'Claude 3 Opus'), 'top_k', 'Limits vocabulary to top K tokens', 'integer', '1', '500', '50', 4);

-- Claude 3 Sonnet parameters
INSERT INTO model_parameter (model_id, param_name, description, data_type, min_value, max_value, default_value, display_order)
VALUES
    ((SELECT id FROM model WHERE model_name = 'Claude 3 Sonnet'), 'temperature', 'Controls randomness in generation', 'float', '0', '1', '0.7', 1),
    ((SELECT id FROM model WHERE model_name = 'Claude 3 Sonnet'), 'max_tokens', 'Maximum tokens to generate', 'integer', '1', '4096', '1024', 2),
    ((SELECT id FROM model WHERE model_name = 'Claude 3 Sonnet'), 'top_p', 'Nucleus sampling parameter', 'float', '0', '1', '0.9', 3),
    ((SELECT id FROM model WHERE model_name = 'Claude 3 Sonnet'), 'top_k', 'Limits vocabulary to top K tokens', 'integer', '1', '500', '50', 4);

-- Llama-3-70b parameters
INSERT INTO model_parameter (model_id, param_name, description, data_type, min_value, max_value, default_value, display_order)
VALUES
    ((SELECT id FROM model WHERE model_name = 'Llama-3-70b'), 'temperature', 'Controls randomness', 'float', '0', '2', '0.8', 1),
    ((SELECT id FROM model WHERE model_name = 'Llama-3-70b'), 'max_tokens', 'Maximum tokens to generate', 'integer', '1', '4096', '1024', 2),
    ((SELECT id FROM model WHERE model_name = 'Llama-3-70b'), 'top_p', 'Nucleus sampling parameter', 'float', '0', '1', '0.9', 3),
    ((SELECT id FROM model WHERE model_name = 'Llama-3-70b'), 'repetition_penalty', 'Penalizes repetition', 'float', '1', '2', '1.1', 4);

-----------

>>> ./postgres/init/subscripts/schema.sql
-- GenAI Playground Schema Create - Unified Item Model

CREATE SEQUENCE messages_id_seq;
CREATE SEQUENCE model_id_seq;
CREATE SEQUENCE model_configuration_id_seq;
CREATE SEQUENCE item_summary_id_seq;
CREATE SEQUENCE model_parameter_id_seq;
CREATE SEQUENCE model_calls_id_seq;

DROP TABLE IF EXISTS model_calls CASCADE;
DROP TABLE IF EXISTS summaries CASCADE;
DROP TABLE IF EXISTS relationships CASCADE;
DROP TABLE IF EXISTS item_summary CASCADE;
DROP TABLE IF EXISTS model_parameter CASCADE;
DROP TABLE IF EXISTS model_configuration CASCADE;
DROP TABLE IF EXISTS items CASCADE;
DROP TABLE IF EXISTS model CASCADE;
DROP TABLE IF EXISTS messages CASCADE;

CREATE TABLE messages
(
    id         bigint                   NOT NULL DEFAULT nextval('messages_id_seq'::regclass),
    content    text,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT messages_pkey PRIMARY KEY (id)
);

CREATE TABLE model
(
    id             bigint       NOT NULL DEFAULT nextval('model_id_seq'::regclass),
    model_name     varchar(200) NOT NULL,
    model_provider varchar(200) NOT NULL,
    model_api_url  varchar(500),
    comment        text,
    CONSTRAINT model_pkey PRIMARY KEY (id),
    CONSTRAINT model_name_provider_unique UNIQUE (model_name, model_provider)
);

CREATE TABLE model_configuration
(
    id           bigint                   NOT NULL DEFAULT nextval('model_configuration_id_seq'::regclass),
    model_id     bigint                   NOT NULL,
    model_config jsonb                    NOT NULL DEFAULT '{}',
    comment      text,
    created_at   timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT model_configuration_pkey PRIMARY KEY (id),
    CONSTRAINT model_configuration_model_id_fkey FOREIGN KEY (model_id)
        REFERENCES model (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

CREATE TABLE model_parameter
(
    id            bigint       NOT NULL DEFAULT nextval('model_parameter_id_seq'::regclass),
    model_id      bigint       NOT NULL,
    param_name    varchar(100) NOT NULL,
    description   text,
    data_type     varchar(50)  NOT NULL DEFAULT 'string',
    min_value     varchar(50),
    max_value     varchar(50),
    default_value varchar(100),
    display_order integer               DEFAULT 0,
    CONSTRAINT model_parameter_pkey PRIMARY KEY (id),
    CONSTRAINT model_parameter_model_id_fkey FOREIGN KEY (model_id)
        REFERENCES model (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT model_parameter_model_id_param_name_key UNIQUE (model_id, param_name)
);

-- Unified items table for all entity types
CREATE TABLE items
(
    id           BIGSERIAL PRIMARY KEY,
    item_type    VARCHAR(100)             NOT NULL,
    name         VARCHAR(500)             NOT NULL,
    description  TEXT,
    creator      VARCHAR(255), -- author, director, researcher, etc.
    created_year VARCHAR(10),  -- publish year, release year, etc.
    external_id  VARCHAR(255), -- ISBN, DOI, IMDB ID, etc.
    source       VARCHAR(255), -- where this item came from
    attributes   JSONB                    NOT NULL DEFAULT '{}',
    created_at   TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at   TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Relationships table - updated to use item IDs instead of type/id pairs
CREATE TABLE relationships
(
    id                bigserial PRIMARY KEY,
    name              varchar(255)             NOT NULL,
    relationship_type varchar(100)             NOT NULL,
    source_item_id    bigint                   NOT NULL,
    target_item_id    bigint                   NOT NULL,
    attributes        jsonb                    NOT NULL DEFAULT '{}',
    created_at        timestamp with time zone NOT NULL DEFAULT now(),
    updated_at        timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT relationships_source_item_fkey FOREIGN KEY (source_item_id)
        REFERENCES items (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT relationships_target_item_fkey FOREIGN KEY (target_item_id)
        REFERENCES items (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

-- Summaries table - simplified to use item_id directly
CREATE TABLE summaries
(
    id                     bigserial PRIMARY KEY,
    name                   varchar(255)             NOT NULL,
    batch_id               bigint,
    model_configuration_id bigint,
    item_id                bigint                   NOT NULL,
    content                text,
    source                 varchar(255),
    attributes             jsonb                    NOT NULL DEFAULT '{}',
    metadata               jsonb,
    created_at             timestamp with time zone NOT NULL DEFAULT now(),
    updated_at             timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT summaries_model_configuration_id_fkey FOREIGN KEY (model_configuration_id)
        REFERENCES model_configuration (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE SET NULL,
    CONSTRAINT summaries_item_id_fkey FOREIGN KEY (item_id)
        REFERENCES items (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

-- Legacy item_summary table (consider migrating to summaries)
CREATE TABLE item_summary
(
    id                     bigint                   NOT NULL DEFAULT nextval('item_summary_id_seq'::regclass),
    model_configuration_id bigint,
    type                   varchar(200),
    item_id                bigint,
    summary                text,
    created_at             timestamp with time zone NOT NULL DEFAULT now(),
    batch_id               bigint,
    CONSTRAINT item_summary_pkey PRIMARY KEY (id),
    CONSTRAINT item_summary_model_configuration_id_fkey FOREIGN KEY (model_configuration_id)
        REFERENCES model_configuration (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE SET NULL
);

-- Enhanced model calls logging table
CREATE TABLE model_calls
(
    id                       bigint                   NOT NULL DEFAULT nextval('model_calls_id_seq'::regclass),
    model_configuration_id   bigint,
    model_configuration_json jsonb,
    provider                 varchar(255),
    prompt_text              text,
    prompt_json              jsonb,
    response_text            text,
    response_json            jsonb,
    token_usage              jsonb,
    chat_options             jsonb,
    metadata                 jsonb,
    success                  boolean                  NOT NULL DEFAULT false,
    error_message            text,
    error_class              varchar(255),
    error_stacktrace         text,
    start_time               timestamp with time zone,
    end_time                 timestamp with time zone,
    duration_ms              bigint,
    api_duration_ms          bigint,
    processing_duration_ms   bigint,
    batch_id                 bigint,
    created_at               timestamp with time zone NOT NULL DEFAULT now(),
    model_name               varchar(255),
    model_provider           varchar(255),
    correlation_id           varchar(255),
    user_id                  varchar(255),
    request_context          varchar(255),
    CONSTRAINT model_calls_pkey PRIMARY KEY (id),
    CONSTRAINT model_calls_model_configuration_id_fkey FOREIGN KEY (model_configuration_id)
        REFERENCES model_configuration (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE SET NULL
);

-- Indexes for performance
CREATE INDEX idx_items_type ON items (item_type);
CREATE INDEX idx_items_name ON items (name);
CREATE INDEX idx_items_creator ON items (creator);
CREATE INDEX idx_items_created_year ON items (created_year);
CREATE INDEX idx_items_external_id ON items (external_id);
CREATE INDEX idx_items_source ON items (source);
CREATE INDEX idx_items_attributes ON items USING GIN (attributes);

-- Combined indexes for common query patterns
CREATE INDEX idx_items_type_name ON items (item_type, name);
CREATE INDEX idx_items_type_creator ON items (item_type, creator);

-- Summaries indexes - updated for simplified structure
CREATE INDEX idx_summaries_item_id ON summaries (item_id);
CREATE INDEX idx_summaries_batch ON summaries (batch_id) WHERE batch_id IS NOT NULL;
CREATE INDEX idx_summaries_model_config ON summaries (model_configuration_id);

-- Relationships indexes - updated for item-based structure
CREATE INDEX idx_relationships_type ON relationships (relationship_type);
CREATE INDEX idx_relationships_source ON relationships (source_item_id);
CREATE INDEX idx_relationships_target ON relationships (target_item_id);
CREATE INDEX idx_relationships_source_target ON relationships (source_item_id, target_item_id);

-- Model calls performance indexes
CREATE INDEX idx_model_calls_config_id ON model_calls (model_configuration_id);
CREATE INDEX idx_model_calls_batch_id ON model_calls (batch_id) WHERE batch_id IS NOT NULL;
CREATE INDEX idx_model_calls_created_at ON model_calls (created_at DESC);
CREATE INDEX idx_model_calls_success ON model_calls (success);
CREATE INDEX idx_model_calls_duration ON model_calls (duration_ms) WHERE success = true;
CREATE INDEX idx_model_calls_model_name ON model_calls (model_name);
CREATE INDEX idx_model_calls_model_provider ON model_calls (model_provider);
CREATE INDEX idx_model_calls_correlation_id ON model_calls (correlation_id);
CREATE INDEX idx_model_calls_user_id ON model_calls (user_id) WHERE user_id IS NOT NULL;
CREATE INDEX idx_model_calls_request_context ON model_calls (request_context);

-- Performance analysis composite indexes
CREATE INDEX idx_model_calls_provider_success_time ON model_calls (model_provider, success, created_at DESC);
CREATE INDEX idx_model_calls_batch_performance ON model_calls (batch_id, success, duration_ms) WHERE batch_id IS NOT NULL;

-- JSONB indexes for efficient querying
CREATE INDEX idx_summaries_attributes ON summaries USING GIN (attributes);
CREATE INDEX idx_summaries_metadata ON summaries USING GIN (metadata) WHERE metadata IS NOT NULL;
CREATE INDEX idx_relationships_attributes ON relationships USING GIN (attributes);
CREATE INDEX idx_model_calls_token_usage ON model_calls USING GIN (token_usage);
CREATE INDEX idx_model_calls_chat_options ON model_calls USING GIN (chat_options);
CREATE INDEX idx_model_calls_metadata ON model_calls USING GIN (metadata);
CREATE INDEX idx_model_calls_response_json ON model_calls USING GIN (response_json);

-- Comments for documentation
COMMENT
ON TABLE items IS 'Unified table for all item types (books, movies, papers, people, etc.)';
COMMENT
ON COLUMN items.item_type IS 'Type of item: book, movie, person, paper, collection, etc.';
COMMENT
ON COLUMN items.name IS 'Primary name/title of the item';
COMMENT
ON COLUMN items.description IS 'Optional description or summary of the item';
COMMENT
ON COLUMN items.creator IS 'Creator of the item (author, director, researcher, etc.)';
COMMENT
ON COLUMN items.created_year IS 'Year the item was created/published/released';
COMMENT
ON COLUMN items.external_id IS 'External identifier (ISBN, DOI, IMDB ID, etc.)';
COMMENT
ON COLUMN items.source IS 'Source where this item data came from';
COMMENT
ON COLUMN items.attributes IS 'Type-specific attributes stored as JSON';

COMMENT
ON TABLE relationships IS 'Relationships between items using unified item IDs';
COMMENT
ON COLUMN relationships.source_item_id IS 'Source item ID from items table';
COMMENT
ON COLUMN relationships.target_item_id IS 'Target item ID from items table';

COMMENT
ON TABLE summaries IS 'Summaries of items using unified item IDs';
COMMENT
ON COLUMN summaries.item_id IS 'Item ID from items table';

-- Column comments for model calls
COMMENT
ON COLUMN model_calls.model_configuration_json IS 'Snapshot of model configuration at execution time';
COMMENT
ON COLUMN model_calls.chat_options IS 'Complete ChatOptions object captured via introspection';
COMMENT
ON COLUMN model_calls.metadata IS 'Additional request/response metadata (headers, rate limits, etc.)';
COMMENT
ON COLUMN model_calls.api_duration_ms IS 'Network/API call duration only';
COMMENT
ON COLUMN model_calls.processing_duration_ms IS 'Local processing duration (serialization, etc.)';
COMMENT
ON COLUMN model_calls.correlation_id IS 'Request correlation ID for distributed tracing';
COMMENT
ON COLUMN model_calls.request_context IS 'Source context (batch_summary, chat, operations, etc.)';

-- Table comments
COMMENT
ON TABLE model_calls IS 'Comprehensive logging of all AI model API interactions';
COMMENT
ON TABLE summaries IS 'Unified summary table for all item types';
COMMENT
ON TABLE item_summary IS 'Legacy summary table - migrate to summaries table';

-- Triggers for updated_at timestamps
CREATE
OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at
= now();
RETURN NEW;
END;
$$
language 'plpgsql';

CREATE TRIGGER update_items_updated_at
    BEFORE UPDATE
    ON items
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_relationships_updated_at
    BEFORE UPDATE
    ON relationships
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_summaries_updated_at
    BEFORE UPDATE
    ON summaries
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-----------
