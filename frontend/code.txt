
>>> ./.eslintrc.js
module.exports = {
    root: true,
    extends: [
        'next/core-web-vitals',
        'eslint:recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:react/recommended',
        'plugin:react-hooks/recommended',
        'plugin:jsx-a11y/recommended',
        'prettier',
    ],
    parser: '@typescript-eslint/parser',
    parserOptions: {
        ecmaFeatures: {
            jsx: true,
        },
        ecmaVersion: 2021,
        sourceType: 'module',
    },
    plugins: ['@typescript-eslint', 'react', 'react-hooks', 'jsx-a11y', 'import'],
    rules: {
        'react/react-in-jsx-scope': 'off',
        'react/prop-types': 'off',
        'react-hooks/rules-of-hooks': 'error',
        'react-hooks/exhaustive-deps': 'warn',
        '@typescript-eslint/explicit-module-boundary-types': 'off',
        '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
        'import/order': [
            'error',
            {
                groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index'],
                'newlines-between': 'always',
                alphabetize: { order: 'asc', caseInsensitive: true },
            },
        ],
    },
    settings: {
        react: {
            version: 'detect',
        },
    },
};

-----------

>>> ./next.config.js
// next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
    reactStrictMode: true,
    swcMinify: true,
}

module.exports = nextConfig

-----------

>>> ./postcss.config.js
// postcss.config.js
module.exports = {
    plugins: {
        tailwindcss: {},
        autoprefixer: {},
    },
}

-----------

>>> ./tailwind.config.js
// tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
        './app/**/*.{js,ts,jsx,tsx,mdx}',
        './pages/**/*.{js,ts,jsx,tsx,mdx}',
        './components/**/*.{js,ts,jsx,tsx,mdx}',
    ],
    theme: {
        extend: {},
    },
    plugins: [],
}

-----------

>>> ./app/config/index.ts
// app/config/index.ts
export const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';

-----------

>>> ./app/lib/api/books.ts
import axios from 'axios';
import { Book, EntitySummary } from '@/app/types';
import { API_URL } from '@/app/config';

export const getBooks = async (): Promise<Book[]> => {
    const response = await axios.get<Book[]>(`${API_URL}/api/books`);
    return response.data;
};

export const getBookSummaries = async (bookIds: number[]): Promise<EntitySummary[]> => {
    const response = await axios.get<EntitySummary[]>(
        `${API_URL}/api/summaries?entity=ranked_book&entityIds=${bookIds.join(',')}`
    );
    return response.data;
};

-----------

>>> ./app/lib/api/chat.ts
import axios from 'axios';
import { ChatRequest, ChatResponse } from '@/app/types';
import { API_URL } from '@/app/config';

export const sendChatMessage = async (content: string): Promise<ChatResponse> => {
    const request: ChatRequest = { content };
    const response = await axios.post<ChatResponse>(`${API_URL}/chat`, request);
    return response.data;
};

-----------

>>> ./app/lib/api/configs.ts
// app/lib/api/configs.ts
import axios from 'axios';
import { ModelConfiguration } from '@/app/types';
import { API_URL } from '@/app/config';

export const getConfigurations = async (): Promise<ModelConfiguration[]> => {
    const response = await axios.get<ModelConfiguration[]>(`${API_URL}/api/model-configurations`);
    return response.data;
};

export const getConfiguration = async (id: number): Promise<ModelConfiguration> => {
    const response = await axios.get<ModelConfiguration>(`${API_URL}/api/model-configurations/${id}`);
    return response.data;
};

export const createConfiguration = async (config: Omit<ModelConfiguration, 'id' | 'createdAt'>): Promise<ModelConfiguration> => {
    const response = await axios.post<ModelConfiguration>(`${API_URL}/api/model-configurations`, config);
    return response.data;
};

-----------

>>> ./app/lib/api/cytoscape.ts
// app/lib/api/cytoscape.ts
import axios from 'axios';
import { API_URL } from '@/app/config';

export const getCytoscapeData = async (): Promise<any> => {
    const response = await axios.get(`${API_URL}/api/cytoscape/books-summaries`);
    return response.data;
};

-----------

>>> ./app/lib/api/index.ts
import * as booksApi from './books';
import * as chatApi from './chat';
import * as modelsApi from './models';
import * as configsApi from './configs';
import * as cytoscapeApi from './cytoscape';

export const api = {
    books: booksApi,
    chat: chatApi,
    models: modelsApi,
    configs: configsApi,
    cytoscape: cytoscapeApi,
};

-----------

>>> ./app/lib/api/models.ts
// app/lib/api/models.ts
import axios from 'axios';
import { Model, ModelConfiguration, ModelParameter, ModelCallRequest, ModelCallResponse } from '@/app/types';
import { API_URL } from '@/app/config';

export const getModels = async (): Promise<Model[]> => {
    const response = await axios.get<Model[]>(`${API_URL}/api/models`);
    return response.data;
};

export const createModel = async (modelData: Omit<Model, 'id'>): Promise<Model> => {
    const response = await axios.post<Model>(`${API_URL}/api/models`, modelData);
    return response.data;
};

export const getModelConfigurations = async (): Promise<ModelConfiguration[]> => {
    const response = await axios.get<ModelConfiguration[]>(`${API_URL}/api/model-configurations`);
    return response.data;
};

export const createModelConfiguration = async (configData: Omit<ModelConfiguration, 'id' | 'createdAt'>): Promise<ModelConfiguration> => {
    const response = await axios.post<ModelConfiguration>(`${API_URL}/api/model-configurations`, configData);
    return response.data;
};

export const getModelParameters = async (modelId: number): Promise<ModelParameter[]> => {
    const response = await axios.get<ModelParameter[]>(`${API_URL}/api/model-parameters/model/${modelId}`);
    return response.data;
};

export const invokeModel = async (modelConfigId: number, prompt: string): Promise<ModelCallResponse> => {
    const request: ModelCallRequest = {
        modelConfigurationId: modelConfigId,
        prompt
    };
    const response = await axios.post<ModelCallResponse>(`${API_URL}/api/batch-summary`, request);
    return response.data;
};

-----------

>>> ./app/types/api.ts
// app/types/api.ts
import { Book, BookSummaryRequest, BookSummaryResponse } from './book';
import { ChatRequest, ChatResponse } from './chat';
import { Model, ModelConfiguration, ModelCallRequest, ModelCallResponse, EntitySummary } from './model';

// API Request/Response type definitions can go here if needed
export interface ApiOptions {
    baseUrl?: string;
    headers?: Record<string, string>;
}

-----------

>>> ./app/types/book.ts
import { ID } from './common';

export interface BookRankSource {
    id: ID;
    orgName: string;
    publishDate: string;
}

export interface Book {
    id: ID;
    rank: number;
    title: string;
    authorName: string;
    publishYear: string;
    source?: BookRankSource;
}

export interface BookSummaryRequest {
    modelConfigurationId: ID;
    prompt: string;
}

export interface BookSummaryResponse {
    successCount: number;
    failureCount: number;
}

-----------

>>> ./app/types/chat.ts
export type ChatRole = 'user' | 'bot' | 'error' | 'system';

export interface ChatMessage {
    role: ChatRole;
    content: string;
    timestamp?: string;
}

export interface ChatRequest {
    content: string;
}

export interface ChatResponse {
    reply: string;
}

-----------

>>> ./app/types/common.ts
export type ID = number;

export interface ApiResponse<T> {
    data: T;
    status: number;
    message?: string;
}

export type ApiError = {
    status: number;
    message: string;
    details?: Record<string, string[]>;
};

-----------

>>> ./app/types/index.ts
export * from './api';
export * from './book';
export * from './chat';
export * from './common';
export * from './model';

-----------

>>> ./app/types/model.ts
import { ID } from './common';

export interface Model {
    id: ID;
    modelName: string;
    modelProvider: string;
    modelApiUrl: string;
    comment: string;
}

export interface ModelParameter {
    id: ID;
    modelId: ID;
    paramName: string;
    description: string;
    dataType: string;
    minValue: string;
    maxValue: string;
    defaultValue: string;
    displayOrder: number;
}

export interface ModelConfiguration {
    id: ID;
    modelId: ID;
    modelName?: string;
    modelProvider?: string;
    modelConfig: Record<string, any>;
    comment: string;
    createdAt: string;
}

export interface ModelCallRequest {
    modelConfigurationId: ID;
    prompt: string;
}

export interface ModelCallResponse {
    response: string;
}

export interface EntitySummary {
    id: ID;
    entityId: ID;
    summary: string;
    modelName: string;
    modelProvider: string;
    modelId: ID;
    modelConfigurationId: ID;
    modelConfig: Record<string, any>;
    configComment: string;
    createdAt: string;
}

-----------

>>> ./package.json
{
  "name": "genai-dashboard-next",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit"
  },
  "dependencies": {
    "axios": "^1.6.2",
    "cytoscape": "^3.28.1",
    "lucide-react": "^0.294.0",
    "next": "^14.2.28",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@types/cytoscape": "^3.19.14",
    "@types/node": "^20.10.4",
    "@types/react": "^18.2.45",
    "@types/react-dom": "^18.2.17",
    "autoprefixer": "^10.4.16",
    "eslint": "^9.27.0",
    "eslint-config-next": "14.0.4",
    "glob": "^10.3.10",
    "lru-cache": "^10.1.0",
    "postcss": "^8.4.32",
    "rimraf": "^5.0.5",
    "tailwindcss": "^3.3.6",
    "typescript": "^5.3.3"
  },
  "overrides": {
    "glob": "^10.3.10",
    "rimraf": "^5.0.5",
    "inflight": "npm:lru-cache@^10.1.0"
  }
}

-----------
